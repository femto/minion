name: Test Async Tools

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'minion/tools/async_*.py'
      - 'minion/main/async_*.py' 
      - 'tests/test_async_*.py'
      - 'test_async_*.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'minion/tools/async_*.py'
      - 'minion/main/async_*.py'
      - 'tests/test_async_*.py'
      - 'test_async_*.py'

jobs:
  test-async-tools:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements.txt
    
    - name: Run async tool unit tests
      run: |
        pytest tests/test_async_tools_unit.py -v --tb=short
    
    - name: Run comprehensive async tool tests
      run: |
        pytest test_async_tools.py::test_all_async_features -v --tb=short
    
    - name: Run async tool examples (standalone)
      run: |
        python test_async_tools.py
      continue-on-error: true  # Allow this to fail without failing the whole job
    
    - name: Test async tool import
      run: |
        python -c "
        import asyncio
        from minion.main.async_python_executor import AsyncPythonExecutor
        from minion.tools.async_base_tool import AsyncBaseTool, async_tool
        from minion.tools.async_example_tools import EXAMPLE_ASYNC_TOOLS
        print('✅ All async tool imports successful')
        "
    
    - name: Test basic async functionality
      run: |
        python -c "
        import asyncio
        from minion.main.async_python_executor import AsyncPythonExecutor
        from minion.tools.async_example_tools import EXAMPLE_ASYNC_TOOLS

        async def test():
            executor = AsyncPythonExecutor(['asyncio'])
            executor.send_tools({'async_calculate_pi': EXAMPLE_ASYNC_TOOLS['async_calculate_pi']})
            result, logs, _ = await executor('pi = await async_calculate_pi(10)')
            assert abs(result - 3.14159) < 1.0
            print('✅ Basic async test passed')

        asyncio.run(test())
        "