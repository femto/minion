{"problem_id": "HumanEval/0", "test": ["assert candidate([1.0, 2.0, 3.0], 0.5) == False", "assert candidate([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"], "entry_point": "has_close_elements"}
{"problem_id": "HumanEval/1", "test": ["assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"], "entry_point": "separate_paren_groups"}
{"problem_id": "HumanEval/2", "test": ["assert candidate(3.5) == 0.5"], "entry_point": "truncate_number"}
{"problem_id": "HumanEval/3", "test": ["assert candidate([1, 2, 3]) == False", "assert candidate([1, 2, -4, 5]) == True"], "entry_point": "below_zero"}
{"problem_id": "HumanEval/4", "test": ["assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0"], "entry_point": "mean_absolute_deviation"}
{"problem_id": "HumanEval/5", "test": ["assert candidate([], 4) == []", "assert candidate([1, 2, 3], 4) == [1, 4, 2, 4, 3]"], "entry_point": "intersperse"}
{"problem_id": "HumanEval/6", "test": ["assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"], "entry_point": "parse_nested_parens"}
{"problem_id": "HumanEval/7", "test": ["assert candidate([], 'a') == []", "assert candidate(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']"], "entry_point": "filter_by_substring"}
{"problem_id": "HumanEval/8", "test": ["assert candidate([]) == (0, 1)", "assert candidate([1, 2, 3, 4]) == (10, 24)"], "entry_point": "sum_product"}
{"problem_id": "HumanEval/9", "test": ["assert candidate([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"], "entry_point": "rolling_max"}
{"problem_id": "HumanEval/10", "test": ["assert candidate('cat') == 'catac'", "assert candidate('cata') == 'catac'"], "entry_point": "make_palindrome"}
{"problem_id": "HumanEval/11", "test": ["assert candidate('010', '110') == '100'"], "entry_point": "string_xor"}
{"problem_id": "HumanEval/12", "test": ["assert candidate([]) == None", "assert candidate(['a', 'b', 'c']) == 'a'", "assert candidate(['a', 'bb', 'ccc']) == 'ccc'"], "entry_point": "longest"}
{"problem_id": "HumanEval/13", "test": ["assert candidate(3, 5) == 1", "assert candidate(25, 15) == 5"], "entry_point": "greatest_common_divisor"}
{"problem_id": "HumanEval/14", "test": ["assert candidate('abc') == ['a', 'ab', 'abc']"], "entry_point": "all_prefixes"}
{"problem_id": "HumanEval/15", "test": ["assert candidate(0) == '0'", "assert candidate(5) == '0 1 2 3 4 5'"], "entry_point": "string_sequence"}
{"problem_id": "HumanEval/16", "test": ["assert candidate('xyzXYZ') == 3", "assert candidate('Jerry') == 4"], "entry_point": "count_distinct_characters"}
{"problem_id": "HumanEval/17", "test": ["assert candidate('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"], "entry_point": "parse_music"}
{"problem_id": "HumanEval/18", "test": ["assert candidate('', 'a') == 0", "assert candidate('aaa', 'a') == 3", "assert candidate('aaaa', 'aa') == 3"], "entry_point": "how_many_times"}
{"problem_id": "HumanEval/19", "test": ["assert candidate('three one five') == 'one three five'"], "entry_point": "sort_numbers"}
{"problem_id": "HumanEval/20", "test": ["assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)", "assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"], "entry_point": "find_closest_elements"}
{"problem_id": "HumanEval/21", "test": ["assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"], "entry_point": "rescale_to_unit"}
{"problem_id": "HumanEval/22", "test": ["assert candidate(['a', 3.14, 5]) == [5]", "assert candidate([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]"], "entry_point": "filter_integers"}
{"problem_id": "HumanEval/23", "test": ["assert candidate('',) == 0", "assert candidate('abc',) == 3"], "entry_point": "strlen"}
{"problem_id": "HumanEval/24", "test": ["assert candidate(15) == 5"], "entry_point": "largest_divisor"}
{"problem_id": "HumanEval/25", "test": ["assert candidate(8) == [2, 2, 2]", "assert candidate(25) == [5, 5]", "assert candidate(70) == [2, 5, 7]"], "entry_point": "factorize"}
{"problem_id": "HumanEval/26", "test": ["assert candidate([1, 2, 3, 2, 4]) == [1, 3, 4]"], "entry_point": "remove_duplicates"}
{"problem_id": "HumanEval/27", "test": ["assert candidate('Hello') == 'hELLO'"], "entry_point": "flip_case"}
{"problem_id": "HumanEval/28", "test": ["assert candidate([]) == ''", "assert candidate(['a', 'b', 'c']) == 'abc'"], "entry_point": "concatenate"}
{"problem_id": "HumanEval/29", "test": ["assert candidate([], 'a') == []", "assert candidate(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']"], "entry_point": "filter_by_prefix"}
{"problem_id": "HumanEval/30", "test": ["assert candidate([-1, 2, -4, 5, 6]) == [2, 5, 6]", "assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]"], "entry_point": "get_positive"}
{"problem_id": "HumanEval/31", "test": ["assert candidate(6) == False", "assert candidate(101) == True", "assert candidate(11) == True", "assert candidate(13441) == True", "assert candidate(61) == True", "assert candidate(4) == False", "assert candidate(1) == False"], "entry_point": "is_prime"}
{"problem_id": "HumanEval/33", "test": ["assert candidate([1, 2, 3]) == [1, 2, 3]", "assert candidate([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5"], "entry_point": "sort_third"}
{"problem_id": "HumanEval/34", "test": ["assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"], "entry_point": "unique"}
{"problem_id": "HumanEval/35", "test": ["assert candidate([1, 2, 3]) == 3", "assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"], "entry_point": "max_element"}
{"problem_id": "HumanEval/36", "test": ["assert candidate(50) == 0", "assert candidate(78) == 2", "assert candidate(79) == 3"], "entry_point": "fizz_buzz"}
{"problem_id": "HumanEval/37", "test": ["assert candidate([1, 2, 3]) == [1, 2, 3]", "assert candidate([5, 6, 3, 4]) == [3, 6, 5, 4]"], "entry_point": "sort_even"}
{"problem_id": "HumanEval/39", "test": ["assert candidate(1) == 2", "assert candidate(2) == 3", "assert candidate(3) == 5", "assert candidate(4) == 13", "assert candidate(5) == 89"], "entry_point": "prime_fib"}
{"problem_id": "HumanEval/40", "test": ["assert candidate([1, 3, 5, 0]) == False", "assert candidate([1, 3, -2, 1]) == True", "assert candidate([1, 2, 3, 7]) == False", "assert candidate([2, 4, -5, 3, 9, 7]) == True", "assert candidate([1]) == False"], "entry_point": "triples_sum_to_zero"}
{"problem_id": "HumanEval/41", "test": ["assert candidate(1) == 0", "assert candidate(2) == 0", "assert candidate(3) == 0", "assert candidate(10) == 0"], "entry_point": "car_race_collision"}
{"problem_id": "HumanEval/42", "test": ["assert candidate([1, 2, 3]) == [2, 3, 4]", "assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"], "entry_point": "incr_list"}
{"problem_id": "HumanEval/43", "test": ["assert candidate([1, 3, 5, 0]) == False", "assert candidate([1, 3, -2, 1]) == False", "assert candidate([1, 2, 3, 7]) == False", "assert candidate([2, 4, -5, 3, 5, 7]) == True", "assert candidate([1]) == False"], "entry_point": "pairs_sum_to_zero"}
{"problem_id": "HumanEval/44", "test": ["assert candidate(8, 3) == '22'", "assert candidate(8, 2) == '1000'", "assert candidate(7, 2) == '111'"], "entry_point": "change_base"}
{"problem_id": "HumanEval/45", "test": ["assert candidate(5, 3) == 7.5"], "entry_point": "triangle_area"}
{"problem_id": "HumanEval/46", "test": ["assert candidate(0) == 0", "assert candidate(1) == 0", "assert candidate(2) == 2", "assert candidate(3) == 0", "assert candidate(5) == 4", "assert candidate(6) == 8", "assert candidate(7) == 14"], "entry_point": "fib4"}
{"problem_id": "HumanEval/47", "test": ["assert candidate([3, 1, 2, 4, 5]) == 3", "assert candidate([-10, 4, 6, 1000, 10, 20]) == 15.0"], "entry_point": "median"}
{"problem_id": "HumanEval/48", "test": ["assert candidate('') == True", "assert candidate('aba') == True", "assert candidate('aaaaa') == True", "assert candidate('zbcd') == False"], "entry_point": "is_palindrome"}
{"problem_id": "HumanEval/49", "test": ["assert candidate(3, 5) == 3", "assert candidate(1101, 101) == 2", "assert candidate(0, 101) == 1", "assert candidate(3, 11) == 8", "assert candidate(100, 101) == 1"], "entry_point": "modp"}
{"problem_id": "HumanEval/51", "test": ["assert candidate('abcdef\\nghijklm') == 'bcdf\\nghjklm'", "assert candidate('abcdef') == 'bcdf'", "assert candidate('aaaaa') == ''", "assert candidate('aaBAA') == 'B'", "assert candidate('zbcd') == 'zbcd'"], "entry_point": "remove_vowels"}
{"problem_id": "HumanEval/52", "test": ["assert candidate([1, 2, 4, 10], 100) == True", "assert candidate([1, 20, 4, 10], 5) == False"], "entry_point": "below_threshold"}
{"problem_id": "HumanEval/53", "test": ["assert candidate([2, 3]) == 5", "assert candidate([5, 7]) == 12"], "entry_point": "add"}
{"problem_id": "HumanEval/54", "test": ["assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True", "assert candidate('abcd', 'dddddddabc') == True", "assert candidate('dddddddabc', 'abcd') == True", "assert candidate('eabcd', 'dddddddabc') == False", "assert candidate('abcd', 'dddddddabce') == False", "assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False"], "entry_point": "same_chars"}
{"problem_id": "HumanEval/55", "test": ["assert candidate(10) == 55", "assert candidate(1) == 1", "assert candidate(8) == 21"], "entry_point": "fib"}
{"problem_id": "HumanEval/56", "test": ["assert candidate(\"<\") == False", "assert candidate(\"<>\") == True", "assert candidate(\"<<><>>\") == True", "assert candidate(\"><<>\") == False"], "entry_point": "correct_bracketing"}
{"problem_id": "HumanEval/57", "test": ["assert candidate([1, 2, 4, 20]) == True", "assert candidate([1, 20, 4, 10]) == False", "assert candidate([4, 1, 0, -10]) == True"], "entry_point": "monotonic"}
{"problem_id": "HumanEval/58", "test": ["assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]"], "entry_point": "common"}
{"problem_id": "HumanEval/59", "test": ["assert candidate(13195) == 29", "assert candidate(2048) == 2"], "entry_point": "largest_prime_factor"}
{"problem_id": "HumanEval/60", "test": ["assert candidate(30) == 465", "assert candidate(100) == 5050", "assert candidate(5) == 15", "assert candidate(10) == 55", "assert candidate(1) == 1"], "entry_point": "sum_to_n"}
{"problem_id": "HumanEval/61", "test": ["assert candidate(\"(\") == False", "assert candidate(\"()\") == True", "assert candidate(\"(()())\") == True", "assert candidate(\")(()\") == False"], "entry_point": "correct_bracketing"}
{"problem_id": "HumanEval/62", "test": ["assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]", "assert candidate([1, 2, 3]) == [2, 6]"], "entry_point": "derivative"}
{"problem_id": "HumanEval/63", "test": ["assert candidate(1) == 0", "assert candidate(5) == 4", "assert candidate(8) == 24"], "entry_point": "fibfib"}
{"problem_id": "HumanEval/64", "test": ["assert candidate('abcde') == 2", "assert candidate('ACEDY') == 3"], "entry_point": "vowels_count"}
{"problem_id": "HumanEval/65", "test": ["assert candidate(12, 1) == '21'", "assert candidate(12, 2) == '12'"], "entry_point": "circular_shift"}
{"problem_id": "HumanEval/66", "test": ["assert candidate(\"\") == 0", "assert candidate(\"abAB\") == 131", "assert candidate(\"abcCd\") == 67", "assert candidate(\"helloE\") == 69", "assert candidate(\"woArBld\") == 131", "assert candidate(\"aAaaaXa\") == 153"], "entry_point": "digitSum"}
{"problem_id": "HumanEval/67", "test": ["assert candidate('5 apples and 6 oranges', 19) == 8", "assert candidate('0 apples and 1 oranges', 3) == 2", "assert candidate('2 apples and 3 oranges', 100) == 95", "assert candidate('100 apples and 1 oranges', 120) == 19"], "entry_point": "fruit_distribution"}
{"problem_id": "HumanEval/68", "test": ["assert candidate([4, 2, 3]) == [2, 1]", "assert candidate([1, 2, 3]) == [2, 1]", "assert candidate([]) == []", "assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]"], "entry_point": "pluck"}
{"problem_id": "HumanEval/69", "test": ["assert candidate([4, 1, 2, 2, 3, 1]) == 2", "assert candidate([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3", "assert candidate([5, 5, 4, 4, 4]) == -1"], "entry_point": "search"}
{"problem_id": "HumanEval/70", "test": ["assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]", "assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert candidate([]) == []"], "entry_point": "strange_sort_list"}
{"problem_id": "HumanEval/71", "test": ["assert candidate(3, 4, 5) == 6.00", "assert candidate(1, 2, 10) == -1"], "entry_point": "triangle_area"}
{"problem_id": "HumanEval/72", "test": ["assert candidate([1, 2], 5) == False", "assert candidate([3, 2, 3], 1) == False", "assert candidate([3, 2, 3], 9) == True", "assert candidate([3], 5) == True"], "entry_point": "will_it_fly"}
{"problem_id": "HumanEval/73", "test": ["assert candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4", "assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1", "assert candidate([1, 2, 3, 2, 1]) == 0"], "entry_point": "smallest_change"}
{"problem_id": "HumanEval/74", "test": ["assert candidate([], []) == []", "assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']", "assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']", "assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']", "assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']"], "entry_point": "total_match"}
{"problem_id": "HumanEval/75", "test": ["assert candidate(30) == True"], "entry_point": "is_multiply_prime"}
{"problem_id": "HumanEval/76", "test": ["assert candidate(1, 4) == True", "assert candidate(2, 2) == True", "assert candidate(8, 2) == True", "assert candidate(3, 2) == False", "assert candidate(3, 1) == False", "assert candidate(5, 3) == False"], "entry_point": "is_simple_power"}
{"problem_id": "HumanEval/77", "test": ["assert candidate(1) == True", "assert candidate(2) == False", "assert candidate(-1) == True", "assert candidate(64) == True", "assert candidate(0) == True", "assert candidate(180) == False"], "entry_point": "iscube"}
{"problem_id": "HumanEval/78", "test": ["assert candidate('AB') == 1", "assert candidate('1077E') == 2", "assert candidate('ABED1A33') == 4", "assert candidate('123456789ABCDEF0') == 6", "assert candidate('2020') == 2"], "entry_point": "hex_key"}
{"problem_id": "HumanEval/79", "test": ["assert candidate(15) == 'db1111db'", "assert candidate(32) == 'db100000db'"], "entry_point": "decimal_to_binary"}
{"problem_id": "HumanEval/80", "test": ["assert candidate('a') == False", "assert candidate('aa') == False", "assert candidate('abcd') == True", "assert candidate('aabb') == False", "assert candidate('adb') == True", "assert candidate('xyy') == False"], "entry_point": "is_happy"}
{"problem_id": "HumanEval/81", "test": ["assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"], "entry_point": "numerical_letter_grade"}
{"problem_id": "HumanEval/82", "test": ["assert candidate('Hello') == True", "assert candidate('abcdcba') == True", "assert candidate('kittens') == True", "assert candidate('orange') == False"], "entry_point": "prime_length"}
{"problem_id": "HumanEval/84", "test": ["assert candidate(1000) == '1'", "assert candidate(150) == '110'", "assert candidate(147) == '1100'"], "entry_point": "solve"}
{"problem_id": "HumanEval/85", "test": ["assert candidate([4, 2, 6, 7]) == 2"], "entry_point": "add"}
{"problem_id": "HumanEval/86", "test": ["assert candidate('Hi') == 'Hi'", "assert candidate('hello') == 'ehllo'", "assert candidate('Hello World!!!') == 'Hello !!!Wdlor'"], "entry_point": "anti_shuffle"}
{"problem_id": "HumanEval/87", "test": ["assert candidate([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]", "assert candidate([], 1) == []", "assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], "entry_point": "get_row"}
{"problem_id": "HumanEval/88", "test": ["assert candidate([]) == []", "assert candidate([5]) == [5]", "assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]", "assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"], "entry_point": "sort_array"}
{"problem_id": "HumanEval/89", "test": ["assert candidate('hi') == 'lm'", "assert candidate('asdfghjkl') == 'ewhjklnop'", "assert candidate('gf') == 'kj'", "assert candidate('et') == 'ix'"], "entry_point": "encrypt"}
{"problem_id": "HumanEval/90", "test": ["assert candidate([1, 2, 3, 4, 5]) == 2", "assert candidate([5, 1, 4, 3, 2]) == 2", "assert candidate([]) == None", "assert candidate([1, 1]) == None"], "entry_point": "next_smallest"}
{"problem_id": "HumanEval/91", "test": ["assert candidate('Hello world') == 0", "assert candidate('The sky is blue. The sun is shining. I love this weather') == 1"], "entry_point": "is_bored"}
{"problem_id": "HumanEval/92", "test": ["assert candidate(5, 2, 7) == True", "assert candidate(3, 2, 2) == False", "assert candidate(3, -2, 1) == True", "assert candidate(3.6, -2.2, 2) == False"], "entry_point": "any_int"}
{"problem_id": "HumanEval/93", "test": ["assert candidate('test') == 'TGST'", "assert candidate('This is a message') == 'tHKS KS C MGSSCGG'"], "entry_point": "encode"}
{"problem_id": "HumanEval/94", "test": ["assert candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10", "assert candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25", "assert candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13", "assert candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11", "assert candidate([0, 81, 12, 3, 1, 21]) == 3", "assert candidate([0, 8, 1, 2, 1, 7]) == 7"], "entry_point": "skjkasdkd"}
{"problem_id": "HumanEval/95", "test": ["assert candidate({'a': 'apple', 'b': 'banana'}) == True", "assert candidate({'a': 'apple', 'A': 'banana', 'B': 'banana'}) == False", "assert candidate({'a': 'apple', 8: 'banana', 'a': 'apple'}) == False", "assert candidate({'Name': 'John', 'Age': '36', 'City': 'Houston'}) == False", "assert candidate({'STATE': 'NC', 'ZIP': '12345'}) == True"], "entry_point": "check_dict_case"}
{"problem_id": "HumanEval/96", "test": ["assert candidate(5) == [2, 3]", "assert candidate(11) == [2, 3, 5, 7]", "assert candidate(0) == []", "assert candidate(20) == [2, 3, 5, 7, 11, 13, 17, 19]", "assert candidate(1) == []", "assert candidate(18) == [2, 3, 5, 7, 11, 13, 17]"], "entry_point": "count_up_to"}
{"problem_id": "HumanEval/97", "test": ["assert candidate(148, 412) == 16", "assert candidate(19, 28) == 72", "assert candidate(2020, 1851) == 0", "assert candidate(14, -15) == 20"], "entry_point": "multiply"}
{"problem_id": "HumanEval/98", "test": ["assert candidate('aBCdEf') == 1", "assert candidate('abcdefg') == 0", "assert candidate('dBBE') == 0"], "entry_point": "count_upper"}
{"problem_id": "HumanEval/99", "test": ["assert candidate('10') == 10", "assert candidate('15.3') == 15", "assert candidate('14.5') == 15", "assert candidate('-14.5') == -15"], "entry_point": "closest_integer"}
{"problem_id": "HumanEval/100", "test": ["assert candidate(3) == [3, 5, 7]"], "entry_point": "make_a_pile"}
{"problem_id": "HumanEval/101", "test": ["assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']", "assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']"], "entry_point": "words_string"}
{"problem_id": "HumanEval/102", "test": ["assert candidate(12, 15) == 14", "assert candidate(13, 12) == -1"], "entry_point": "choose_num"}
{"problem_id": "HumanEval/103", "test": ["assert candidate(1, 5) == '0b11'", "assert candidate(7, 5) == -1", "assert candidate(10, 20) == '0b1111'", "assert candidate(20, 33) == '0b11010'"], "entry_point": "rounded_avg"}
{"problem_id": "HumanEval/104", "test": ["assert candidate([15, 33, 1422, 1]) == [1, 15, 33]", "assert candidate([152, 323, 1422, 10]) == []"], "entry_point": "unique_digits"}
{"problem_id": "HumanEval/106", "test": ["assert candidate(5) == [1, 2, 6, 24, 15]"], "entry_point": "f"}
{"problem_id": "HumanEval/107", "test": ["assert candidate(3) == (1, 2)", "assert candidate(12) == (4, 6)"], "entry_point": "even_odd_palindrome"}
{"problem_id": "HumanEval/108", "test": ["assert candidate([]) == 0", "assert candidate([-1, 11, -11]) == 1", "assert candidate([1, 1, 2]) == 3"], "entry_point": "count_nums"}
{"problem_id": "HumanEval/109", "test": ["assert candidate([3, 4, 5, 1, 2]) == True", "assert candidate([3, 5, 4, 1, 2]) == False", "assert candidate([]) == True"], "entry_point": "move_one_ball"}
{"problem_id": "HumanEval/110", "test": ["assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == 'YES'", "assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == 'NO'"], "entry_point": "exchange"}
{"problem_id": "HumanEval/111", "test": ["assert candidate('a b c') == {'a': 1, 'b': 1, 'c': 1}", "assert candidate('a b b a') == {'a': 2, 'b': 2}", "assert candidate('a b c a b') == {'a': 2, 'b': 2}", "assert candidate('b b b b a') == {'b': 4}", "assert candidate('') == {}"], "entry_point": "histogram"}
{"problem_id": "HumanEval/112", "test": ["assert candidate('abcde', 'ae') == ('bcd', False)", "assert candidate('abcdef', 'b') == ('acdef', False)", "assert candidate('abcdedcba', 'ab') == ('cdedc', True)"], "entry_point": "reverse_delete"}
{"problem_id": "HumanEval/113", "test": ["assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]", "assert candidate(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"], "entry_point": "odd_count"}
{"problem_id": "HumanEval/114", "test": ["assert candidate([2, 3, 4, 1, 2, 4]) == 1", "assert candidate([-1, -2, -3]) == -6"], "entry_point": "minSubArraySum"}
{"problem_id": "HumanEval/115", "test": ["assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6", "assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5", "assert candidate([[0,0,0], [0,0,0]], 5) == 0"], "entry_point": "max_fill"}
{"problem_id": "HumanEval/116", "test": ["assert candidate([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]", "assert candidate([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]", "assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]"], "entry_point": "sort_array"}
{"problem_id": "HumanEval/117", "test": ["assert candidate(\"Mary had a little lamb\", 4) == [\"little\"]", "assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]", "assert candidate(\"simple white space\", 2) == []", "assert candidate(\"Hello world\", 4) == [\"world\"]", "assert candidate(\"Uncle sam\", 3) == [\"Uncle\"]"], "entry_point": "select_words"}
{"problem_id": "HumanEval/118", "test": ["assert candidate('yogurt') == 'u'", "assert candidate('FULL') == 'U'", "assert candidate('quick') == ''", "assert candidate('ab') == ''"], "entry_point": "get_closest_vowel"}
{"problem_id": "HumanEval/119", "test": ["assert candidate(['()(', ')']) == 'Yes'", "assert candidate([')', ')']) == 'No'"], "entry_point": "match_parens"}
{"problem_id": "HumanEval/120", "test": ["assert candidate([-3, -4, 5], 3) == [-4, -3, 5]", "assert candidate([4, -4, 4], 2) == [4, 4]", "assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]"], "entry_point": "maximum"}
{"problem_id": "HumanEval/121", "test": ["assert candidate([5, 8, 7, 1]) == 12", "assert candidate([3, 3, 3, 3, 3]) == 9", "assert candidate([30, 13, 24, 321]) == 0"], "entry_point": "solution"}
{"problem_id": "HumanEval/122", "test": ["assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24"], "entry_point": "add_elements"}
{"problem_id": "HumanEval/123", "test": ["assert candidate(5) == [1, 5]"], "entry_point": "get_odd_collatz"}
{"problem_id": "HumanEval/124", "test": ["assert candidate('03-11-2000') == True", "assert candidate('15-01-2012') == False", "assert candidate('04-0-2040') == False", "assert candidate('06-04-2020') == True", "assert candidate('06/04/2020') == False"], "entry_point": "valid_date"}
{"problem_id": "HumanEval/125", "test": ["assert candidate('Hello world!') == ['Hello', 'world!']", "assert candidate('Hello,world!') == ['Hello', 'world!']", "assert candidate('abcdef') == 3"], "entry_point": "split_words"}
{"problem_id": "HumanEval/126", "test": ["assert candidate([5]) == True", "assert candidate([1, 2, 3, 4, 5]) == True", "assert candidate([1, 3, 2, 4, 5]) == False", "assert candidate([1, 2, 3, 4, 5, 6]) == True", "assert candidate([1, 2, 3, 4, 5, 6, 7]) == True", "assert candidate([1, 3, 2, 4, 5, 6, 7]) == False", "assert candidate([1, 2, 2, 3, 3, 4]) == True", "assert candidate([1, 2, 2, 2, 3, 4]) == False"], "entry_point": "is_sorted"}
{"problem_id": "HumanEval/127", "test": ["assert candidate((1, 2), (2, 3)) == 'NO'", "assert candidate((-1, 1), (0, 4)) == 'NO'", "assert candidate((-3, -1), (-5, 5)) == 'YES'"], "entry_point": "intersection"}
{"problem_id": "HumanEval/128", "test": ["assert candidate([1, 2, 2, -4]) == -9", "assert candidate([0, 1]) == 0", "assert candidate([]) == None"], "entry_point": "prod_signs"}
{"problem_id": "HumanEval/129", "test": ["assert candidate([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]", "assert candidate([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"], "entry_point": "minPath"}
{"problem_id": "HumanEval/130", "test": ["assert candidate(3) == [1, 3, 2, 8]", "assert candidate(2) == [1, 3, 2]", "assert candidate(4) == [1, 3, 2, 8, 3]"], "entry_point": "tri"}
{"problem_id": "HumanEval/131", "test": ["assert candidate(1) == 1", "assert candidate(4) == 0", "assert candidate(235) == 15"], "entry_point": "digits"}
{"problem_id": "HumanEval/132", "test": ["assert candidate('[[]]') == True", "assert candidate('[]]]]]]][[[[[]') == False", "assert candidate('[][]') == False", "assert candidate('[]') == False", "assert candidate('[[][]]') == True", "assert candidate('[[]][[') == True"], "entry_point": "is_nested"}
{"problem_id": "HumanEval/133", "test": ["assert candidate([1, 2, 3]) == 14", "assert candidate([1, 4, 9]) == 98", "assert candidate([1, 3, 5, 7]) == 84", "assert candidate([1.4, 4.2, 0]) == 29", "assert candidate([-2.4, 1, 1]) == 6"], "entry_point": "sum_squares"}
{"problem_id": "HumanEval/134", "test": ["assert candidate(\"apple pie\") == False", "assert candidate(\"apple pi e\") == True", "assert candidate(\"apple pi e \") == False", "assert candidate(\"\") == False"], "entry_point": "check_if_last_char_is_a_letter"}
{"problem_id": "HumanEval/135", "test": ["assert candidate([1,2,4,3,5]) == 3", "assert candidate([1,2,3]) == -1"], "entry_point": "can_arrange"}
{"problem_id": "HumanEval/136", "test": ["assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)", "assert candidate([]) == (None, None)", "assert candidate([0]) == (None, None)"], "entry_point": "largest_smallest_integers"}
{"problem_id": "HumanEval/137", "test": ["assert candidate(1, 2.5) == 2.5", "assert candidate(1, '2,3') == '2,3'", "assert candidate('5,1', '6') == '6'", "assert candidate('1', 1) == None"], "entry_point": "compare_one"}
{"problem_id": "HumanEval/138", "test": ["assert candidate(4) == False", "assert candidate(6) == False", "assert candidate(8) == True"], "entry_point": "is_equal_to_sum_even"}
{"problem_id": "HumanEval/139", "test": ["assert candidate(4) == 288"], "entry_point": "special_factorial"}
{"problem_id": "HumanEval/140", "test": ["assert candidate('Example') == 'Example'", "assert candidate('Example 1') == 'Example_1'", "assert candidate(' Example 2') == '_Example_2'", "assert candidate(' Example   3') == '_Example-3'"], "entry_point": "fix_spaces"}
{"problem_id": "HumanEval/141", "test": ["assert candidate('example.txt') == 'Yes'", "assert candidate('1example.dll') == 'No'"], "entry_point": "file_name_check"}
{"problem_id": "HumanEval/142", "test": ["assert candidate([1, 2, 3]) == 6", "assert candidate([]) == 0", "assert candidate([-1, -5, 2, -1, -5]) == -126"], "entry_point": "sum_squares"}
{"problem_id": "HumanEval/143", "test": ["assert candidate('This is a test') == 'is'", "assert candidate('lets go for swimming') == 'go for'"], "entry_point": "words_in_sentence"}
{"problem_id": "HumanEval/144", "test": ["assert candidate('1/5', '5/1') == True", "assert candidate('1/6', '2/1') == False", "assert candidate('7/10', '10/2') == False"], "entry_point": "simplify"}
{"problem_id": "HumanEval/145", "test": ["assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]", "assert candidate([]) == []"], "entry_point": "order_by_points"}
{"problem_id": "HumanEval/146", "test": ["assert candidate([15, -73, 14, -15]) == 1", "assert candidate([33, -2, -3, 45, 21, 109]) == 2"], "entry_point": "specialFilter"}
{"problem_id": "HumanEval/147", "test": ["assert candidate(5) == 1"], "entry_point": "get_max_triples"}
{"problem_id": "HumanEval/148", "test": ["assert candidate('Jupiter', 'Neptune') == ('Saturn', 'Uranus')", "assert candidate('Earth', 'Mercury') == ('Venus')", "assert candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')", ""], "entry_point": "bf"}
{"problem_id": "HumanEval/149", "test": ["assert candidate(['aa', 'a', 'aaa']) == ['aa']", "assert candidate(['ab', 'a', 'aaa', 'cd']) == ['ab', 'cd']"], "entry_point": "sorted_list_sum"}
{"problem_id": "HumanEval/150", "test": ["assert candidate(7, 34, 12) == 34", "assert candidate(15, 8, 5) == 5"], "entry_point": "x_or_y"}
{"problem_id": "HumanEval/151", "test": ["assert candidate([1, 3, 2, 0]) == 10", "assert candidate([-1, -2, 0]) == 0", "assert candidate([9, -2]) == 81", "assert candidate([0]) == 0", "assert candidate([]) == 0"], "entry_point": "double_the_difference"}
{"problem_id": "HumanEval/152", "test": ["assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]", "assert candidate([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]"], "entry_point": "compare"}
{"problem_id": "HumanEval/153", "test": ["assert candidate('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'", "assert candidate('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"], "entry_point": "Strongest_Extension"}
{"problem_id": "HumanEval/154", "test": ["assert candidate('abcd', 'abd') == False", "assert candidate('hello', 'ell') == True", "assert candidate('whassup', 'psus') == False", "assert candidate('abab', 'baa') == True", "assert candidate('efef', 'eeff') == False", "assert candidate('himenss', 'simen') == True"], "entry_point": "cycpattern_check"}
{"problem_id": "HumanEval/155", "test": ["assert candidate(-12) == (1, 1)", "assert candidate(123) == (1, 2)"], "entry_point": "even_odd_count"}
{"problem_id": "HumanEval/156", "test": ["assert candidate(19) == 'xix'", "assert candidate(152) == 'clii'", "assert candidate(426) == 'cdxxvi'"], "entry_point": "int_to_mini_roman"}
{"problem_id": "HumanEval/157", "test": ["assert candidate(3, 4, 5) == True", "assert candidate(1, 2, 3) == False"], "entry_point": "right_angle_triangle"}
{"problem_id": "HumanEval/158", "test": ["assert candidate([\"name\", \"of\", \"string\"]) == \"string\"", "assert candidate([\"name\", \"enam\", \"game\"]) == \"enam\"", "assert candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""], "entry_point": "find_max"}
{"problem_id": "HumanEval/159", "test": ["assert candidate(5, 6, 10) == [11, 4]", "assert candidate(4, 8, 9) == [12, 1]", "assert candidate(1, 10, 10) == [11, 0]", "assert candidate(2, 11, 5) == [7, 0]"], "entry_point": "eat"}
{"problem_id": "HumanEval/160", "test": ["assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9"], "entry_point": "do_algebra"}
{"problem_id": "HumanEval/161", "test": ["assert candidate('1234') == '4321'", "assert candidate('ab') == 'AB'", "assert candidate('#a@C') == '#A@c'"], "entry_point": "solve"}
{"problem_id": "HumanEval/162", "test": ["assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "assert candidate('') == None"], "entry_point": "string_to_md5"}
{"problem_id": "HumanEval/163", "test": ["assert candidate(2, 8) == [2, 4, 6, 8]", "assert candidate(8, 2) == [2, 4, 6, 8]", "assert candidate(10, 14) == []"], "entry_point": "generate_integers"}
